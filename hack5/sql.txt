
create table roles(
  id_role integer primary key AUTOINCREMENT,
  name varchar(50) not null  
);

- table taxes
create table taxes(
  id_tax integer primary key AUTOINCREMENT,
  percentage integer not null  
);

- table offers
create table offers(
  id_offer integer primary key AUTOINCREMENT,
  status INTEGER not null  
);

- table discounts
create table discounts(
  id_discount integer primary key AUTOINCREMENT,
  status varchar(50) not null  ,
  percentage INTEGER not null 
);

- table payments
create table payments(
  id_payment integer primary key AUTOINCREMENT,
  type varchar(50) not null  
);

-- table customers
create table customers(
  id_customer integer primary key AUTOINCREMENT,
  email varchar(30) unique not null,
  id_country INTEGER not null,
  id_role INTEGER not null,
  name varchar(30) not null,
  age INTEGER not null,
  password varchar(30) not null,
  physical_address varchar(50) not null,
  foreign key (id_role) references roles (id_role),
  foreign key (id_country) references countries (id_country) 
);

- table invoice_status
create table invoice_status(
  id_invoice_status integer primary key AUTOINCREMENT,
  status varchar(50) not null 
);

- table products
create table products(
  id_product integer primary key AUTOINCREMENT,
  id_discount integer not null  ,
  id_offer integer not null,
  id_tax integer not null,
  name varchar(30) not null,
  details varchar(50) not null,
  minimum_stock integer not null,
  maximun_stock integer not null,
  current_stock integer not null,
  price NUMERIC(10,2),
  price_with_tax NUMERIC(10,2),
  foreign key (id_discount) references discounts (id_discount),
  foreign key (id_offer) references offers (id_offer),
  foreign key (id_tax) references taxes (id_tax) 
);

- table product_customers
create table product_customers(
  id_product integer not null,
  id_customer INTEGER not null,
  foreign key (id_product) references products (id_product),
  foreign key (id_customer) references customers (id_customer) 
);

- table invoices
create table invoices(
  id_invoice integer primary key AUTOINCREMENT,
  id_customer INTEGER,
  id_payment INTEGER,
  id_invoice_status INTEGER,
  date date,
  total_to_pay  NUMERIC(10,2),
  foreign key (id_invoice_status) references invoice_status (id_invoice_status),
  foreign key (id_customer) references customers (id_customer),
  foreign key (id_payment) references payments (id_payment)
);

- table orders
create table orders(
  id_order integer primary key AUTOINCREMENT,
  id_invoice INTEGER not NULL,
  id_product INTEGER not NULL,
  detail varchar(50),
  amount integer,
  price NUMERIC,
  foreign key (id_invoice) references invoices (id_invoice),
  foreign key (id_product) references products (id_product)
);